Accept-Reject Method
```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
# Instalacja i ładowanie pakietu
if (!requireNamespace("VGAM", quietly = TRUE)) {
  install.packages("VGAM")
}
library(VGAM)

# Funkcja gęstości prawdopodobieństwa dla rozkładu normalnego
normal_pdf <- function(x) {
  return (dnorm(x))
}

# Stała ograniczająca (dobrana eksperymentalnie)
M_normal <- 2.5

# Funkcja generująca próbkę z dystrybucji ograniczającej (propozycji)
generate_proposal_sample_normal <- function() {
  return (runif(1, -2, 2))  # Przykładowa dystrybucja ograniczająca
}

# Funkcja generująca próbkę z metody accept-rejection
accept_rejection_normal <- function(n) {
  samples_normal <- numeric(n)
  i <- 1
  
  while (i <= n) {
    x_normal <- generate_proposal_sample_normal()
    u_normal <- runif(1)
    
    if (u_normal <= normal_pdf(x_normal) / (M_normal * dunif(x_normal, -2, 2))) {
      samples_normal[i] <- x_normal
      i <- i + 1
    }
  }
  
  return (samples_normal)
}

# Wygenerowanie 300 próbek z rozkładu normalnego przy użyciu metody accept-rejection
set.seed(456)
samples_normal <- accept_rejection_normal(300)
```

```{r}
# Histogram próbek
hist(samples_normal, breaks = 30, main = "Histogram próbek z rozkładu normalnego z krzywą gęstości", col = "lightblue", border = "black", probability = TRUE)
# Dodanie krzywej gęstości
curve(dnorm(x), add = TRUE, col = "red", lwd = 2)

# Q-Q Plot
qqnorm(samples_normal)
qqline(samples_normal)

```




```{r}
ks.test(samples_normal, "pnorm")
```
```{r}
shapiro.test(samples_normal)
```

Envelope Accept-Reject Method
```{r}
# Envelope Accept-Reject Method dla rozkładu normalnego
envelope_accept_reject_normal <- function(n) {
  samples <- numeric(n)
  i <- 1
  # Stała ograniczająca (dobrana eksperymentalnie)
  M <- 1 / (sqrt(2 * pi))
  
  # Funkcja gęstości prawdopodobieństwa dla rozkładu normalnego
  normalpdf <- function(x) {
    return (dnorm(x))
  }
  
  while (i <= n) {
    x <- rnorm(1)  # Przykładowa dystrybucja propozycji (normalna)
    u <- runif(1)
    
    if (u <= dnorm(x) / (M * normalpdf(x))) {
      samples[i] <- x
      i <- i + 1
    }
  }
  
  return (samples)
}

# Wygenerowanie próbek z rozkładu normalnego przy użyciu Envelope Accept-Reject
samples_envelope_normal <- envelope_accept_reject_normal(1000)

# Histogram próbek z ośią y w skali od 0 do 1
hist(samples_envelope_normal, breaks = 30, main = "Envelope Accept-Reject Method - Normal Distribution", col = "lightblue", border = "black", probability = TRUE)

# Krzywa gęstości
curve(dnorm(x), add = TRUE, col = "red", lwd = 2, from = min(samples_envelope_normal), to = max(samples_envelope_normal))

# Dostosowanie skali ośi y krzywej gęstości
lines(density(samples_envelope_normal), col = "blue", lty = 2, lwd = 2)

```

```{r}
# Q-Q Plot
qqnorm(samples_envelope_normal)
qqline(samples_envelope_normal)

```

```{r}
ks.test(samples_envelope_normal, "pnorm")
```
```{r}
shapiro.test(samples_envelope_normal)
```
```{r}
# Liczba próbek
N_wykl <- 10000

# Generowanie próbek z rozkładu jednostajnego U(0,1)
U <- runif(N_wykl)

# Transformacja odwrotna
A <- -log(U)

# Generowanie próbek z rozkładu wykładniczego za pomocą wbudowanej funkcji rexp
B <- rexp(N_wykl)

# Tworzenie wykresów
par(mfrow = c(1, 2))  # Ustawienie układu wykresów w 1 wierszu i 2 kolumnach

# Histogram dla próbek wygenerowanych za pomocą transformacji odwrotnej
hist(A, freq = FALSE, main = "Exp from Uniform", xlab = "Wartości", ylab = "Gęstość", col = "lightgray", border = "black")
curve(dexp(x, rate = 1), col = "red", lwd = 2, add = TRUE)

# Histogram dla próbek wygenerowanych za pomocą wbudowanej funkcji rexp
hist(B, freq = FALSE, main = "Exp from R", xlab = "Wartości", ylab = "Gęstość", col = "lightgray", border = "black")
curve(dexp(x, rate = 1), col = "red", lwd = 2, add = TRUE)
```
